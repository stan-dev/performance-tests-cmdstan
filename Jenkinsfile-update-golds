#!/usr/bin/env groovy
@Library('StanUtils')
import org.stan.Utils
import groovy.json.JsonSlurper
import groovy.json.*

def utils = new org.stan.Utils()

String stanc3_bin_url() { params.stanc3_bin_url != "nightly" ? "\nSTANC3_TEST_BIN_URL=${params.stanc3_bin_url}\n" : "" }

pipeline {
    agent { label 'docker' }
    environment {
        GITHUB_TOKEN = credentials('6e7c1e8f-ca2c-4b11-a70e-d934d3f6b681')
    }
    options {
        skipDefaultCheckout()
        preserveStashes(buildCount: 7)
    }
    parameters {
        string(defaultValue: 'nightly', name: 'stanc3_bin_url', description: 'Custom stanc3 binary url')
    }
    stages {
        stage('Clean checkout') {
            agent {
                docker {
                    image 'stanorg/ci:gpu'
                    label 'docker'
                    reuseNode true
                }
            }
            steps {
                deleteDir()
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/master']],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [[$class: 'SubmoduleOption',
                                        disableSubmodules: false,
                                        parentCredentials: false,
                                        recursiveSubmodules: true,
                                        reference: '',
                                        trackingSubmodules: false]],
                          submoduleCfg: [],
                          userRemoteConfigs: [[url: "https://github.com/stan-dev/performance-tests-cmdstan.git",
                                               credentialsId: 'a630aebc-6861-4e69-b497-fd7f496ec46b'
                    ]]])

                stash 'PerfSetup'
            }
        }
        stage("Numerical Accuracy and Performance Tests on Known-Good Models") {
            agent { label 'osx && intel' }
            when { branch 'master' }
            steps {

               unstash "PerfSetup"
               writeFile(file: "cmdstan/make/local", text: "CXXFLAGS += -march=core2 \n${stanc3_bin_url()}")

               sh "python3 runPerformanceTests.py --runs 3 --check-golds --name=known_good_perf --tests-file=known_good_perf_all.tests"

               ls -lhart

                /* Create a merge request */
                withCredentials([usernamePassword(credentialsId: 'a630aebc-6861-4e69-b497-fd7f496ec46b',
                    usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    sh """
                        git config user.email "mc.stanislaw@gmail.com"
                        git config user.name "Stan Jenkins"
                        git config auth.token "${GITHUB_TOKEN}"

                        CURR_DATE=\$(date +%F)
                        BRANCH_NAME="update-golds-test/${CURR_DATE}"

                        git checkout -b "${BRANCH_NAME}"

                        git add .
                        git commit -m "Update-golds test results for ${CURR_DATE}"
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/stan-dev/performance-tests-cmdstan.git "${BRANCH_NAME}"

                        # curl -s -H "Authorization: token ${GITHUB_TOKEN}" -X POST -d '{"title": "Update golds test results generated by Jenkins for ${CURR_DATE}", "head":"${BRANCH_NAME}", "base":"master", "body":"Results generated through a [Jenkins Job](https://jenkins.flatironinstitute.org/job/Stan/job/XXXXXX/)"}' "https://api.github.com/repos/stan-dev/performance-tests-cmdstan/pulls"
                    """
                }

               junit '*.xml'
               archiveArtifacts '*.xml'
            }
        }
    }
    // post {
    //     success {
    //         script { utils.mailBuildResults("SUCCESS", "stan-buildbot@googlegroups.com, serban.nicusor@toptal.com") }
    //     }
    //     unstable {
    //         script { utils.mailBuildResults("UNSTABLE", "stan-buildbot@googlegroups.com, serban.nicusor@toptal.com") }
    //     }
    //     failure {
    //         script { utils.mailBuildResults("FAILURE", "stan-buildbot@googlegroups.com, serban.nicusor@toptal.com") }
    //     }
    // }
}
